#
# This is a convenience linux makefile
# for use on top of cmake meant for use during development
#
# It supports
#   - out-of-tree builds
#   - Buildtype selection (Release and Debug build)
#   - Native Builds
#   - Crosscompilation
#
#
# Crosscompilation is done using cmake's CMAKE_TOOLCHAIN_FILE feature.
# One has to provide a cmake Toolchain file.
# Search the web for examples.
#
# Builds are done within a hidden directory.
# A "native" build with the system compiler creates a .native directory.
# Crossbuilds create hidden directory consisting of a dot followed by
# the basename of the Toolchainfile.
#
# for calling convention and short help see: "make ?"
#
#
#

ifneq ("$(TCFILE)", "")
  TCDEF=-DCMAKE_TOOLCHAIN_FILE=$(TCFILE)
  TCNF := $(basename $(notdir $(TCFILE)))
  BuildROOT=.$(TCNF)
else
  BuildROOT=.native
endif

ifeq ("$(DEBUG)", "1")
CMAKE_ARGS=-DCMAKE_BUILD_TYPE=DEBUG
else
CMAKE_ARGS=-DCMAKE_BUILD_TYPE=RELEASE
endif


.PHONY: all
all: $(BuildROOT)
	( cd $(BuildROOT) ; $(MAKE) all)
	
dist-clean:
	rm -rf $(BuildROOT)
	
$(BuildROOT):
	( mkdir -p $(BuildROOT) ; cd $(BuildROOT) ; cmake $(TCDEF) $(CMAKE_ARGS) -DCMAKE_INSTALL_PREFIX=/usr .. )

.DEFAULT: conf
	( cd $(BuildROOT) && $(MAKE) $@ )

?:
	@echo "usage:"
	@echo "    make [DEBUG=1] [TCFILE=<path-to-cmake-tc-file>] [all:default | dist-clean | ?]"
	@echo "    targets"
	@echo "       dist-clean         # deletes the build dir"
	@echo "       all                # executes a build"
	@echo "       ?                  # provides this short help"
	@echo ""
	@echo " all other targets generated by cmake such as install and clean are forwarded"
	@echo " call \"make help\" to see all targets"

